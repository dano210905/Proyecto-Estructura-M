package parqueadero;

import java.io.*;
import javax.swing.JOptionPane;
/**
 *
 * Modificado por Isabela Bohada Valencia e Andrés Bedoya Cifuentes 
 */
public class CRUDCelda
{
     /*Metodo que busca un vehiculo en el archivo celda y si lo encuentra
    retorna verdadero, sino lo encuentra retorna falso*/
    public boolean Buscar(Archivos objArch, String IdCel) {
        boolean sw = false;//retorno
        try {
            //locales auxiliares para extraer la informacion del archivo
            
            String Id,Est,Ubi,TiVe;
         
            String Reg[];//para tomar la linea String como vector de datos y facilitar el trabajo con el registro
            //se abre el archivo modo lectura y se imprime el mensaje de apertura que retorna
            objArch.AbrirArchivoModoLectura("Celdas.txt");
            //se invoca al metodo de leer registro con 8 atributos para el vector de la linea o registro del archivo plano 
            //se recibe el texto en Reg
            Reg = objArch.LeerRegistro(6);
            //mientras existan datos en el archivo
            while (Reg != null) //mientras not EOF()
            {
                /*los datos del Reg que se obtiene del archivo plano de texto se 
                asignan a las variables auxiliares locales para su facil manejo 
                como posiciones del vector String*/
                Id = Reg[0];
                TiVe= Reg[1];
                Ubi = Reg[2];
                Est = Reg[3];
                              
                //si el Id que extraimos del archivo en Reg es igual a el Id que se esta buscando
                if (Id.equalsIgnoreCase(Id)) 
                {
                    sw = true;
                }//fin si
                //se lee el otro registro para que termine secuencialmente la lectura del archivo texto
                Reg = objArch.LeerRegistro(3);
            }//fin mientras
            //cerramos el archivo plano de texto en modo lectura
            objArch.CerrarArchivoModoLectura();

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Archivo leido y cerrado correctamente");
        }
        return sw;

    }//fin de buscar

    //--------------------------------------------------------------    
    /*metodo que a partir de un Id lo busca en el archivo y si no lo encuentra
     lo graba fisicamente con sus otros datos en el archivo y si lo encuentra muestra un mensaje 
     y no graba de nuevo la celda porque estara repetido*/
    public void IngresarCelda(Archivos objArch, String Id) 
    {
        Celdas objV = new Celdas();
        //se invoca el metodo buscar   
        if (Buscar(objArch, Id) == false) {
            //se llama el metodo de ingresar datos de del vehiculo que recibe Idca y retorna el objeto vehiculo  
            objV = objV.IngresarDatos(Id);
            //se invoca el metodo que graba fisicamente en el archivo
            GrabarCelda(objArch, objV);
        } else {
            JOptionPane.showMessageDialog(null, "vehiculo YA existe en el archivo");
        }//fin si
    }//fin de ingresar
    
/*metodo que graba fisicamente el registro en el archivo, recibe el objeto
  archivo para el manejo del archivo y el objeto celda que lo pasa a un
  String con la estructura de registro deseada para el .txt  */
    public void GrabarCelda(Archivos objArchivos, Celdas objc) 
    {
        try {
            String cadena = "";//para pasar el objeto a cadena con estructura
            objArchivos.AbrirArchivoModoEscritura("Celdas.txt");
            /*con el objeto que llega se invoca el metodo para la estructura del registro
            separado por comas y se recibe en la cadena para grabarla en el archivo*/
            cadena = objc.EstructuraReg();//se recibe el objeto pero en una cadena de atributos separados por comas
            //la cadena separada por comas se graba persistentemente en memoria
            objArchivos.EscribirRegistro("" + cadena);
            objArchivos.CerrarArchivoModoEscritura();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "SE GRABA EN El ARCHIVO");
        }
    }//fin de grabar celda

    //metodo que retorna en una cadena todo el contenido del archivo para ser mostrado
    public String MostrarTodo(Archivos objArch) 
    {      
        String cadena = "";
        try {
            //locales auxiliares para extraer la informacion del archivo
            String Id,Est,Ubi,TiVe;
           
            String Reg[];//para tomar la linea String como vector de datos y facilitar el trabajo con el registro
            //se abre el archivo modo lectura y se imprime el mensaje de apertura que retorna
            JOptionPane.showMessageDialog(null, "" + objArch.AbrirArchivoModoLectura("Celdas.txt"));
            //se invoca al metodo de leer registro con 6 atributos para el vector de la linea o registro del archivo Idno 
            //se recibe el texto en Reg
            Reg = objArch.LeerRegistro(6);
            //mientras existan datos en el archivo
            while (Reg!=null) //mientras not EOF()
            {
               /*los datos del Reg que se obtiene del archivo plano de texto se 
                asignan a las variables auxiliares locales para su facil manejo 
                como posiciones del vector String*/
               Id = Reg[0];
                TiVe= Reg[1];
                Ubi = Reg[2];
                Est = Reg[3];
                                
                Celdas objv;
                objv=new Celdas(Id,Est,Ubi,TiVe);
                
                cadena = cadena + objv.EstructuraReg() + "\n";
                                
                Reg = objArch.LeerRegistro(6);
            }//fin mientras  
            objArch.CerrarArchivoModoLectura();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Archivo leído y cerrado correctamente");
        }
        return cadena;
     }//fin de mostrar todo el archivo

      
 public Celdas Consultar(Archivos objArch,String IdCelda)   
 {
     Celdas objc, objvC =null;//variable local para el retorno
     if(Buscar(objArch, IdCelda)==true)//se encuentra el dato en el archivo
     {
         try {
            //locales auxiliares para extraer la informacion del archivo
            String Id,Est,Ubi,TiVe;
        
            String Reg[];//para tomar la linea String como vector de datos y facilitar el trabajo con el registro
            //se abre el archivo modo lectura y se imprime el mensaje de apertura que retorna
            JOptionPane.showMessageDialog(null, "" + objArch.AbrirArchivoModoLectura("Celdas.txt"));
            //se invoca al metodo de leer registro con 12 atributos para el vector de la linea o registro del archivo Idno 
            //se recibe el texto en Reg
            Reg = objArch.LeerRegistro(6);
            //mientras existan datos en el archivo
            while (Reg!=null) //mientras not EOF()
            {
               /*los datos del Reg que se obtiene del archivo Idno de texto se 
                asignan a las variables auxiliares locales para su facil manejo 
                como posiciones del vector String*/
                Id = Reg[0];
                TiVe= Reg[1];
                Ubi = Reg[2];
                Est = Reg[3];
                
                
                objc=new Celdas(Id,Est,Ubi,TiVe);
                if(Id.equalsIgnoreCase(Id))
                     objvC=objc;
                               
                Reg = objArch.LeerRegistro(6);
            }//fin mientras  
            objArch.CerrarArchivoModoLectura();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Archivo leído y cerrado correctamente");
        }
     }else{//No se encuentra
         JOptionPane.showMessageDialog(null,"Dato a consultar en el archivo NO existe");
     }//fin si
  return objvC ;//retorna en null o el vehiculo
 }//fin consultar
 
 
  public int ContarLineas(String arch)
    {
      int numLineas=0;//contador de lineas y es su retorno
      
      try
      {
       File archivo = new File(arch);
       if(archivo.isFile()== false)//si no hay archivo
       {
         return 0;  //retorna cero registros
       }
       else//si hay archivo
        {
       FileReader lectura = new FileReader(arch);
       BufferedReader Br = new BufferedReader(lectura);//objeto logico de archivo
       
        while (Br.readLine()!=null) //mientras se "lean" lineas y no llegue a null
          {
            numLineas++;//contador de lineas
          }
        Br.close();//se cierra el buffer o sea el almacenamiento
        return numLineas;//retorna el numero de lineas o registros que tiene
       }//fin si
      }
      catch (IOException e)
      {
         e.printStackTrace();/*printStackTrace( ) Se utiliza para imprimir 
                                el registro del stack donde se ha iniciado la excepción*/
      }
      return numLineas;
    }//fin de contar lineas

  //metodo que retorna el ultimo dato del archivo
    public Object RetornarUltimo(Archivos objArch) 
    {      
        Celdas UltimoVehi=null, objc;//para el retorno
        int con=ContarLineas("Celdas.txt");//se cuentan los registros existentes
        if(con>0)//si hay datos en el archivo
        {
                
        try {
            //locales auxiliares para extraer la informacion del archivo
            String Id,Est,Ubi,TiVe;
            
            String Reg[];//para tomar la linea String como vector de datos y facilitar el trabajo con el registro
            //se abre el archivo modo lectura y se imprime el mensaje de apertura que retorna
            JOptionPane.showMessageDialog(null, "" + objArch.AbrirArchivoModoLectura("Celdas.txt"));
            //se invoca al metodo de leer registro con 6 atributos para el vector de la linea o registro del archivo Idno 
            //se recibe el texto en Reg
            Reg = objArch.LeerRegistro(6);
            int conAux=0;//este contador me ayuda a llegar al ultimo    
            //mientras existan datos en el archivo
            while (Reg!=null) //mientras not EOF()
            {
               /*los datos del Reg que se obtiene del archivo Idno de texto se 
                asignan a las variables auxiliares locales para su facil manejo 
                como posiciones del vector String*/
               Id = Reg[0];
                TiVe= Reg[1];
                Ubi = Reg[2];
                Est = Reg[3];
            
                objc=new Celdas(Id,Est,Ubi,TiVe);
                
                conAux=conAux+1;//se cuenta para llegar al ultimo
                if(conAux==con)  //si llegamos al final
                    UltimoVehi=objc;//guardo el ultimo para el retorno
                
                Reg = objArch.LeerRegistro(6);//otro registro
            }//fin mientras  
            objArch.CerrarArchivoModoLectura();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Archivo leído y cerrado correctamente");
        }
        }//no hay datos
        else
            JOptionPane.showMessageDialog(null, "*Archivo con problemas o vacio");
        return UltimoVehi;
     }//fin buscar el ultimo dato del archivo
    
    //metodo que retorna el primer dato del archivo
    public Object RetornarPrimero(Archivos objArch) 
    {      
        Celdas objc=null;//para el retorno
        int con=ContarLineas("Celdas.txt");//se cuentan los registros existentes
        if(con>0)//si hay datos en el archivo
        {
                
        try {
            //locales auxiliares para extraer la informacion del archivo
            String Id,Est,Ubi,TiVe;
           
            String Reg[];//para tomar la linea String como vector de datos y facilitar el trabajo con el registro
            //se abre el archivo modo lectura y se imprime el mensaje de apertura que retorna
            JOptionPane.showMessageDialog(null, "" + objArch.AbrirArchivoModoLectura("Celdas.txt"));
            //se invoca al metodo de leer registro con 6 atributos para el vector de la linea o registro del archivo Idno 
            //se recibe el texto en Reg
            Reg = objArch.LeerRegistro(6);
                Id = Reg[0];
                TiVe= Reg[1];
                Ubi = Reg[2];
                Est = Reg[3];
            
                objc=new Celdas(Id,Est,Ubi,TiVe);
                objArch.CerrarArchivoModoLectura();
               
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Archivo leído y cerrado correctamente");
        }
        }//no hay datos
        else
            JOptionPane.showMessageDialog(null, "*Archivo con problemas o vacio");
        return objc;
     }//fin de buscar primer registro
  
  
}//fin clase CRUD
